<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aembr</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-23T06:12:24.248Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Aembr</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo常用操作</title>
    <link href="http://yoursite.com/2018/01/26/Hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/01/26/Hexo常用操作/</id>
    <published>2018-01-26T08:24:38.000Z</published>
    <updated>2018-10-23T06:12:24.248Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><a id="more"></a><p>安装Hexo前要先安装Node.js和Git，具体安装请各自百度。</p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><pre><code>npm install -g hexo-cli</code></pre><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;(不写默认在当前目录)</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="建站完成后目录结构"><a href="#建站完成后目录结构" class="headerlink" title="建站完成后目录结构"></a>建站完成后目录结构</h3><pre><code>├── _config.yml(网站的配置信息)├── package.json(应用程序的信息)├── scaffolds(模板文件夹)├── source(资源文件夹)|   ├── _drafts(草稿文件夹)|   └── _posts(文章文件夹)└── themes(Hexo主题)</code></pre><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">布局路径</span><br><span class="line">postsource/_posts</span><br><span class="line">pagesource</span><br><span class="line">draftsource/_drafts</span><br></pre></td></tr></table></figure><p>layout对应于scaffolds文件夹中布局文件;默认取_config.yml中的default_layout</p><h3 id="Hexo服务器安装"><a href="#Hexo服务器安装" class="headerlink" title="Hexo服务器安装"></a>Hexo服务器安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server(默认4000)或hexo server -p 5000(指定端口)</span><br><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><h3 id="生成静态文件并部署网站"><a href="#生成静态文件并部署网站" class="headerlink" title="生成静态文件并部署网站"></a>生成静态文件并部署网站</h3><pre><code>hexo generate --deploy简写：hexo g -d</code></pre><h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><pre><code>安装 hexo-deployer-git。$ npm install hexo-deployer-git --savedeploy:    type: git    repo: &lt;repository url&gt;    branch: [branch]    message: [message] //提交信息</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="博客建站" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>NXOpen包装ufunc</title>
    <link href="http://yoursite.com/2017/08/05/NXOpen%E5%8C%85%E8%A3%85ufunc/"/>
    <id>http://yoursite.com/2017/08/05/NXOpen包装ufunc/</id>
    <published>2017-08-05T05:56:27.000Z</published>
    <updated>2018-10-23T05:46:20.460Z</updated>
    
    <content type="html"><![CDATA[<p>NXOpen是一个应用程序编程接口（API）工具包的集合，它允许通过开放的体系结构灵活地集成定制NX应用程序。其目的是使复杂和重复的任务自动化。此外，还允许集成不同的应用程序，以及第三方和NX应用程序，在不同的计算机平台上共享数据，从不同的位置使用异构网络，甚至跨Internet。NXOpen API提供了一个开放的体系结构，可以由第三方、客户和内部用户利用它们来创建和集成定制软件应用程序。NXOpen主要是指NX的common API。</p><p>ufunc(Open C)发展了很多年，包含5000多个函数，功能覆盖方方面面。Common API通过生成.NET、Java和Python的包装类来保证能使用这些函数。</p><blockquote><p>一些OpenC函数没有包装类，详情参见列表<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide:id1142196:xid455853" target="_blank" rel="noopener">Non-NXOpen functions</a><br>OpenC模块及函数映射到NXOpen详见<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide:id1142196:mapping_guide:naming_conventions" target="_blank" rel="noopener">命名约定</a></p></blockquote><p>Common API将对象表示为典型的面向对象对象，而OpenC则将它们表示为标记(Tag)。下面的示例说明如何在对象和标记之间切换。</p><a id="more"></a><p>在使用包装类前要理解一些简单的概念：</p><h2 id="名称空间和模块结构"><a href="#名称空间和模块结构" class="headerlink" title="名称空间和模块结构"></a><strong>名称空间和模块结构</strong></h2><p>.NET NXOpen 包装类定义在NXOpen.UF命名空间。Java包装类在NXOpenUF.jar中，定义在nxopen.uf包。Python包装类包含在NXOpen_UF.pvd扩展模块，定义在NXOpen.UF模块。</p><h2 id="UFSession"><a href="#UFSession" class="headerlink" title="UFSession"></a><strong>UFSession</strong></h2><p>获得包装类之前你首先要获得UFSession的实例。包装类(与ufunc模块对应)定义在UFSession的方法中。例如：UFSession的curve()方法返回一个UFCurve类的实例。</p><h2 id="TaggedObjectManager-and-NXObjectManager"><a href="#TaggedObjectManager-and-NXObjectManager" class="headerlink" title="TaggedObjectManager and NXObjectManager"></a><strong>TaggedObjectManager and NXObjectManager</strong></h2><p>TaggedObjectManager是定义在nxopen包里面的一个NXOpen Java接口。使用该类的get方法获取与标签对应的NXOpen Tag对象。<br>.NET、Python对应的类分别为TaggedObjectManager、NXObjectManager。</p><h2 id="Tag属性"><a href="#Tag属性" class="headerlink" title="Tag属性"></a><strong>Tag属性</strong></h2><p>所有的NXOpen标签对象在.NET和Python中都有一个Tag属性，在Java和c++中有一个tag()方法。</p><h2 id="包装类-具体实例"><a href="#包装类-具体实例" class="headerlink" title="包装类-具体实例"></a><strong>包装类-具体实例</strong></h2><p>1.NXopen .NET<br>下面的例子使用ufunc API生成一个圆弧并用NXOpen.NET API查询圆弧数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Dim theSession As Session = Session.GetSession() </span><br><span class="line">Dim theUFSession As UFSession = UFSession.GetUFSession() </span><br><span class="line">&apos; Create an ARC using the Open API </span><br><span class="line">Tag arc;</span><br><span class="line">Dim arc_coords As UFCurve.Arc</span><br><span class="line">arc_coords.radius = 1.0</span><br><span class="line">arc_coords.arc_center = New Double()&#123;1.0, 1.0, 0.0&#125;</span><br><span class="line">arc_coords.start_angle = 0.0</span><br><span class="line">arc_coords.end_angle = Math.PI</span><br><span class="line">arc_coords.matrix_tag = theSession.Parts.Display.WCS.CoordinateSystem.Orientation.Tag</span><br><span class="line">theUFSession.Curve.CreateArc( arc_coords, arc)</span><br><span class="line">&apos; Get the Arc Object to use with NX Open </span><br><span class="line">NXOpen.Arc nxArc= CType(NXOpen.Utilities.NXObjectManager.Get(arc), NXOpen.Arc)</span><br><span class="line">&apos;Get the Arc parameters using NX Open APIs</span><br><span class="line">Dim start_angle As Double = nxArc.StartAngle </span><br><span class="line">Dim end_angle As Double = nxArc.EndAngle </span><br><span class="line">Dim arc_center As NXOpen.Point3d = nxArc.CenterPoint</span><br></pre></td></tr></table></figure></p><p>2.NXOpen JAVA<br>下面的例子使用ufunc API生成一个圆弧并用NXOpenJava API查询圆弧数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Session theSession = (Session)SessionFactory.get(&quot;Session&quot;);</span><br><span class="line">UFSession theUFSession = (UFSession)SessionFactory.get(&quot;UFSession&quot;);</span><br><span class="line">/* Create Arc using Open C API wrapper */</span><br><span class="line">UFCurve ufCurve = theUFSession.curve();</span><br><span class="line">UFCurve.Arc ufArc = new UFCurve.Arc();</span><br><span class="line">UFCsys ufCsys = theUFSession.csys();</span><br><span class="line">/* Fill out the data structure */</span><br><span class="line">ufArc.startAngle = 0.0;</span><br><span class="line">ufArc.endAngle = 3.0;</span><br><span class="line">ufArc.arcCenter=new double[3];</span><br><span class="line">ufArc.arcCenter[0] = 0.0;</span><br><span class="line">ufArc.arcCenter[1] = 0.0;</span><br><span class="line">ufArc.arcCenter[2] = 1.0;</span><br><span class="line">ufArc.radius = 2.0;</span><br><span class="line">/* Create Arc */</span><br><span class="line">Tag wcsData = ufCsys.askWcs();</span><br><span class="line">ufArc.matrixTag = ufCsys.askMatrixOfObject(wcsData);</span><br><span class="line">Tag arcTag = ufCurve.createArc(ufArc);</span><br><span class="line">/* Get the Arc Object to use with NX Open*/</span><br><span class="line">Arc arc = (Arc)theSession.taggedObjectManager().get(arc2Tag);</span><br><span class="line">/* Get arc parameters using NX Open Java APIs */</span><br><span class="line">double start_angle = arc.startAngle();</span><br></pre></td></tr></table></figure></p><p>3.NXOpen Python<br>下面的例子使用ufunc API生成一个圆弧并用NXOpenPython API查询圆弧数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">theSession = NXOpen.Session.GetSession() </span><br><span class="line">theUFSession = NXOpen.UF.UFSession.GetUFSession() </span><br><span class="line"># Create an ARC using the Open API </span><br><span class="line">arc_coords = NXOpen.UF.Curve.Arc()</span><br><span class="line">arc_coords.Radius = 1.0</span><br><span class="line">arc_coords.ArcCenter = [1.0, 1.0, 0.0]</span><br><span class="line">arc_coords.StartAngle = 0.0</span><br><span class="line">arc_coords.EndAngle = math.pi</span><br><span class="line">arc_coords.MatrixTag = </span><br><span class="line">    theSession.Parts.Display.WCS.CoordinateSystem.Orientation.Tag</span><br><span class="line">arc_tag = theUFSession.Curve.CreateArc( arc_coords)</span><br><span class="line"># Get the Arc Object to use with NX Open </span><br><span class="line">nxArc = NXOpen.TaggedObjectManager.GetTaggedObject(arc_tag)</span><br><span class="line"># Get the Arc parameters using NX Open APIs</span><br><span class="line">start_angle = nxArc.StartAngle </span><br><span class="line">end_angle = nxArc.EndAngle </span><br><span class="line">arc_center = nxArc.CenterPoint</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p><a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide:id1142196:wrappers" target="_blank" rel="noopener">包装类官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NXOpen是一个应用程序编程接口（API）工具包的集合，它允许通过开放的体系结构灵活地集成定制NX应用程序。其目的是使复杂和重复的任务自动化。此外，还允许集成不同的应用程序，以及第三方和NX应用程序，在不同的计算机平台上共享数据，从不同的位置使用异构网络，甚至跨Internet。NXOpen API提供了一个开放的体系结构，可以由第三方、客户和内部用户利用它们来创建和集成定制软件应用程序。NXOpen主要是指NX的common API。&lt;/p&gt;
&lt;p&gt;ufunc(Open C)发展了很多年，包含5000多个函数，功能覆盖方方面面。Common API通过生成.NET、Java和Python的包装类来保证能使用这些函数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一些OpenC函数没有包装类，详情参见列表&lt;a href=&quot;https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide:id1142196:xid455853&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Non-NXOpen functions&lt;/a&gt;&lt;br&gt;OpenC模块及函数映射到NXOpen详见&lt;a href=&quot;https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide:id1142196:mapping_guide:naming_conventions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;命名约定&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Common API将对象表示为典型的面向对象对象，而OpenC则将它们表示为标记(Tag)。下面的示例说明如何在对象和标记之间切换。&lt;/p&gt;
    
    </summary>
    
      <category term="NX二次开发" scheme="http://yoursite.com/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="NX二次开发" scheme="http://yoursite.com/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>NXOpen应用程序目录结构</title>
    <link href="http://yoursite.com/2017/08/03/NXOpen%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/08/03/NXOpen应用程序目录结构/</id>
    <published>2017-08-03T01:20:32.000Z</published>
    <updated>2018-10-23T05:46:09.116Z</updated>
    
    <content type="html"><![CDATA[<p>对于环境变量指定的任何根目录，NX寻找以下五个子目录：startup, application, udo, udf, and dfa。</p><p>注意：子目录下的文件名不能跟根目录下任何目录名相同(包含根目录下的所有子目录，不管层级)。否则程序执行会报错。</p><a id="more"></a><p>每个子目录使用说明如下：</p><table><thead><tr><th>子目录</th><th>使用</th></tr></thead><tbody><tr><td>startup</td><td>放置自定义菜单文件、对话框和可执行文件。通常用于一般功能的应用程序</td></tr><tr><td>application</td><td>放置与NX菜单关联的自定义菜单项和可执行文件</td></tr><tr><td>udo</td><td>放置NX初始化时用于管理自定义对象所注册的方法</td></tr><tr><td>dfa</td><td>放置与该应用程序关联的类、函数和方法的KF ASCII定义文件。此目录不显示在DFA管理器或KF首选项中</td></tr><tr><td>udf</td><td>用户的自定义特性</td></tr></tbody></table><p>有关使用环境变量和客户默认配置KF应用程序的信息。请参见<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_fusion:id1395371:id1395391:defaults_defaults_variables" target="_blank" rel="noopener">知识融合在线帮助</a>中的默认值和变量概述。</p><p>当启动NX时，它会自动加载startup和udo目录下的库和菜单文件。当NX加载每个共享库时，它立即执行标准入口点（参见<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide:id1142016:entry_points" target="_blank" rel="noopener">入口点</a>）。然后应用程序可以初始化任何事件。</p><p>为了让NX更快地启动，可以将程序放在application目录中，而不是startup目录。当您选择此策略时，当用户选择关联菜单按钮时，NX加载库，而不是在启动时加载。这个策略不能用于管理UDO。UDO程序必须放在startup，以确保NX能加载到事件。</p><p>包含在这些子目录的动态加载共享库必须包含操作系统的正确文件扩展名。如果没有使用正确的扩展，则NX将无法找到目标文件。NX将显示一个错误，指出应用程序没有被正确注册。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide:id1142131:genid_application_root_directory_48_1916" target="_blank" rel="noopener">NXopen应用程序目录结构</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于环境变量指定的任何根目录，NX寻找以下五个子目录：startup, application, udo, udf, and dfa。&lt;/p&gt;
&lt;p&gt;注意：子目录下的文件名不能跟根目录下任何目录名相同(包含根目录下的所有子目录，不管层级)。否则程序执行会报错。&lt;/p&gt;
    
    </summary>
    
      <category term="NX二次开发" scheme="http://yoursite.com/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="NX二次开发" scheme="http://yoursite.com/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>NX新建工具条</title>
    <link href="http://yoursite.com/2017/08/01/NX%E6%96%B0%E5%BB%BA%E5%B7%A5%E5%85%B7%E6%9D%A1/"/>
    <id>http://yoursite.com/2017/08/01/NX新建工具条/</id>
    <published>2017-08-01T07:24:13.000Z</published>
    <updated>2018-10-23T05:45:45.783Z</updated>
    
    <content type="html"><![CDATA[<p>NX工具条包括经典工具条和新版本的功能区。两种对应于不同的文件。经典工具条是以.tbr结尾的文件，功能区为.rtb结尾。</p><blockquote><p>工具条文件需放在应用程序startup文件夹，以确保NX启动时能找到该文件。<br>整个应用要想被NX找到需配置环境变量UGII_USER_DIR=&lt;根路径&gt;。或在&lt;NX安装目录&gt;\UGII\menus\custom_dirs.dat文件中配置根路径。</p></blockquote><a id="more"></a><h2 id="经典工具条"><a href="#经典工具条" class="headerlink" title="经典工具条"></a>经典工具条</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TITLE 金旅二次开发工具</span><br><span class="line">VERSION 160</span><br><span class="line">DOCK TOP</span><br><span class="line"></span><br><span class="line">BUTTON MENU1</span><br><span class="line">BUTTON MENU2</span><br><span class="line">BUTTON MENU3</span><br><span class="line">SEPARATOR</span><br><span class="line">BUTTON MENU21</span><br><span class="line">BUTTON MENU22</span><br><span class="line">SEPARATOR</span><br><span class="line">BUTTON TC1</span><br><span class="line">SEPARATOR</span><br><span class="line">BUTTON DRAFT1</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/assets/photos/工具条1.jpg" alt="经典工具条"></p><ul><li>TITLE顾名思义为标题</li><li>VERSION，版本</li><li>DOCK，工具栏的停靠位置。可去TOP、BOTTOM、LEFT、RIGHT等</li><li>BUTTON后为men文件中定义的菜单项名称。如果菜单项有定义图标，则显示图标。否则显示菜单项文字。</li><li>SEPARATOR，分割线</li></ul><h2 id="新版本功能区"><a href="#新版本功能区" class="headerlink" title="新版本功能区"></a>新版本功能区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">TITLE 金旅二次开发工具</span><br><span class="line">VERSION 170</span><br><span class="line"></span><br><span class="line">BEGIN_GROUP JL_MAIN1</span><br><span class="line">LABEL 金旅二次开发工具</span><br><span class="line">BUTTON MENU1</span><br><span class="line">BUTTON MENU2</span><br><span class="line">BUTTON MENU3</span><br><span class="line">END_GROUP</span><br><span class="line"></span><br><span class="line">BEGIN_GROUP JL_MAIN2</span><br><span class="line">LABEL 自动指引</span><br><span class="line">BUTTON MENU21</span><br><span class="line">RIBBON_STYLE ALWAYS_SMALL_IMAGE_AND_TEXT</span><br><span class="line">BUTTON MENU22</span><br><span class="line">RIBBON_STYLE ALWAYS_SMALL_IMAGE_AND_TEXT</span><br><span class="line">END_GROUP</span><br><span class="line"></span><br><span class="line">BEGIN_GROUP JL_TC</span><br><span class="line">LABEL TC相关</span><br><span class="line">BUTTON TC1</span><br><span class="line">RIBBON_STYLE ALWAYS_SMALL_IMAGE_AND_TEXT</span><br><span class="line">END_GROUP</span><br><span class="line"></span><br><span class="line">BEGIN_GROUP JL_DRAFT</span><br><span class="line">LABEL 制图相关</span><br><span class="line">BUTTON DRAFT1</span><br><span class="line">RIBBON_STYLE ALWAYS_SMALL_IMAGE_AND_TEXT</span><br><span class="line">END_GROUP</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/assets/photos/工具条2.jpg" alt="功能区"></p><ul><li>TITLE，标题</li><li>VERSION，版本</li><li>BEGIN_GROUP，END_GROUP定义一个组。如上图有”金旅二次开发工具”、”自动指引”、”TC相关”、”制图相关”四个组。</li><li>LABEL，组名称</li><li>BUTTON，men文件中菜单项的名称</li><li>RIBBON_STYLE，按钮的样式</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>细节请参考<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_menuscript" target="_blank" rel="noopener">菜单及工具条</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NX工具条包括经典工具条和新版本的功能区。两种对应于不同的文件。经典工具条是以.tbr结尾的文件，功能区为.rtb结尾。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工具条文件需放在应用程序startup文件夹，以确保NX启动时能找到该文件。&lt;br&gt;整个应用要想被NX找到需配置环境变量UGII_USER_DIR=&amp;lt;根路径&amp;gt;。或在&amp;lt;NX安装目录&amp;gt;\UGII\menus\custom_dirs.dat文件中配置根路径。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NX二次开发" scheme="http://yoursite.com/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="NX二次开发" scheme="http://yoursite.com/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>NX新建菜单栏</title>
    <link href="http://yoursite.com/2017/07/30/NX%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95%E6%A0%8F/"/>
    <id>http://yoursite.com/2017/07/30/NX新建菜单栏/</id>
    <published>2017-07-30T06:23:08.000Z</published>
    <updated>2018-10-23T05:45:34.629Z</updated>
    
    <content type="html"><![CDATA[<p>Menuscript语言可将新菜单项添加到NX。Menuscript命令存在于.men后缀结尾的文件中。无论使用哪种语言，菜单文件都是相同的。</p><p>要添加一个新的菜单项，以下描述菜单文件的基本命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">VERSION 120 </span><br><span class="line">EDIT UG_GATEWAY_MAIN_MENUBAR </span><br><span class="line">MENU &lt;独一无二的文本，用于识别现有的或新的菜单&gt;   </span><br><span class="line">    &lt;菜单项1&gt;   </span><br><span class="line">    &lt;菜单项2&gt;   </span><br><span class="line">    &lt;...&gt; </span><br><span class="line">END_OF_MENU</span><br></pre></td></tr></table></figure></p><p>每个菜单项可以通过下面的命令定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BUTTON  &lt;所有菜单项独一无二的文本&gt; </span><br><span class="line">LABEL   &lt;菜单展示的文本&gt; </span><br><span class="line">MESSAGE &lt;鼠标放在按钮上弹出的提示&gt;</span><br><span class="line">BITMAP  &lt;按钮图标名称&gt;</span><br><span class="line">ACTIONS &lt;程序的名称&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>任何程序都可以链接到菜单文件中的一个按钮。可以是与NX无关的浏览器，或是传统的NX程序。men文件一定要放在startup目录下</p><h2 id="运行与NX无关的程序"><a href="#运行与NX无关的程序" class="headerlink" title="运行与NX无关的程序"></a>运行与NX无关的程序</h2><p>下面简单的men文件在打开菜单后面注册一个按钮，通过IE访问西门子官网。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">VERSION 120 </span><br><span class="line">EDIT UG_GATEWAY_MAIN_MENUBAR </span><br><span class="line">AFTER UG_FILE_OPEN </span><br><span class="line">    BUTTON SAMPLE_GO_TO_SIEMENS </span><br><span class="line">    LABEL Go to Siemens.com </span><br><span class="line">    ACTIONS &quot;start iexplore http://www.siemens.com&quot; </span><br><span class="line">END_OF_AFTER</span><br></pre></td></tr></table></figure></p><h2 id="运行与CommonAPI程序"><a href="#运行与CommonAPI程序" class="headerlink" title="运行与CommonAPI程序"></a>运行与CommonAPI程序</h2><p>如果想从按钮运行一个通用的API程序，必须要把编译后的程序放置在application目录下。在men文件中的ACTIONS后加上文件名。对于C、C++、C#或VB程序，不需带后缀。对于java程序，需带后缀让NX知道是.class或.jar文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">VERSION 120</span><br><span class="line">EDIT UG_GATEWAY_MAIN_MENUBAR</span><br><span class="line"></span><br><span class="line">AFTER UG_HELP</span><br><span class="line">CASCADE_BUTTON MY_MENU</span><br><span class="line">LABEL 二次开发工具</span><br><span class="line">END_OF_AFTER</span><br><span class="line"></span><br><span class="line">MENU MY_MENU</span><br><span class="line"></span><br><span class="line">BUTTON MENU1</span><br><span class="line">LABEL 属性快捷填写</span><br><span class="line">MESSAGE 快速填写属性</span><br><span class="line">BITMAP properties_object</span><br><span class="line">ACTIONS FillInProperty.jar</span><br><span class="line"></span><br><span class="line">    SEPARATOR</span><br><span class="line"></span><br><span class="line">BUTTON MENU2</span><br><span class="line">LABEL 自动分层</span><br><span class="line">MESSAGE 将显示的实体、草图、曲线点、基准、片体移动到指定层，2、3层对象忽略，除了1（有用实体）、2（有用片体）、3（有用控制曲线）层打开，其他隐藏</span><br><span class="line">BITMAP layer_move_to</span><br><span class="line">ACTIONS Layout.class</span><br><span class="line"></span><br><span class="line">END_OF_MENU</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>细节请参考<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_menuscript" target="_blank" rel="noopener">菜单及工具条</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Menuscript语言可将新菜单项添加到NX。Menuscript命令存在于.men后缀结尾的文件中。无论使用哪种语言，菜单文件都是相同的。&lt;/p&gt;
&lt;p&gt;要添加一个新的菜单项，以下描述菜单文件的基本命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;VERSION 120 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EDIT UG_GATEWAY_MAIN_MENUBAR &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MENU &amp;lt;独一无二的文本，用于识别现有的或新的菜单&amp;gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;菜单项1&amp;gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;菜单项2&amp;gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;...&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;END_OF_MENU&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;每个菜单项可以通过下面的命令定义：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BUTTON  &amp;lt;所有菜单项独一无二的文本&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LABEL   &amp;lt;菜单展示的文本&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MESSAGE &amp;lt;鼠标放在按钮上弹出的提示&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BITMAP  &amp;lt;按钮图标名称&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ACTIONS &amp;lt;程序的名称&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="NX二次开发" scheme="http://yoursite.com/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="NX二次开发" scheme="http://yoursite.com/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>官方例子：怎样创建一个NXOpen程序</title>
    <link href="http://yoursite.com/2017/07/27/%E5%AE%98%E6%96%B9%E4%BE%8B%E5%AD%90%EF%BC%9A%E6%80%8E%E6%A0%B7%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AANXOpen%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/07/27/官方例子：怎样创建一个NXOpen程序/</id>
    <published>2017-07-27T07:46:15.000Z</published>
    <updated>2018-10-23T05:45:19.766Z</updated>
    
    <content type="html"><![CDATA[<p>你可以为许多不同的任务和函数创建一个NX打开的程序，比如在NX中操作的一个从命令行启动的函数，它可以被添加到菜单列表或其他NX命令结构中，或者是一个新对话框。</p><p>在这个例子中，我们创建一个对话框，选择面然后改变面颜色。</p><p>主要步骤如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建一个对话框</span><br><span class="line">从对话框中生成代码</span><br><span class="line">添加代码到生成的源文件中</span><br><span class="line">设置目录结构</span><br><span class="line">测试</span><br></pre></td></tr></table></figure></p><p>在这个例子中，我们修改initialize(初始化)和apply(应用)回调函数。对于更复杂的对话框，你可以将代码添加到update(更新)回调函数来处理不断的变化。<br>有关创建对话框的其他信息，参见<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_blockstyler:intro_int_ov_bl" target="_blank" rel="noopener">UIStyler块介绍</a>。<br>有关使用静态API属性的信息，参见<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_blockstyler:bs_code_generation_ov:xid396515" target="_blank" rel="noopener">块属性的静态API</a></p><a id="more"></a><h2 id="一、创建对话框"><a href="#一、创建对话框" class="headerlink" title="一、创建对话框"></a><strong>一、创建对话框</strong></h2><p>1.打开NX</p><p>2.打开建模应用模块。可以通过打开一个零件或新建一个模型进入</p><p>3.搜索“块 UI 样式编辑器”进入UI编辑器(注意搜索要带空格)</p><p>4.在块目录组中，打开‘选择’目录。点击‘选择对象’，创建并显示“无标题”对话框</p><p><img src="/assets/photos/块编辑器1.jpg" alt="选择对象"></p><p>5.打开‘基本’目录，点击‘对象颜色拾取器’</p><p>6.通过修改对话框中的属性来更改对话框标签。</p><ul><li>在块选项卡，group块树中选择selection0。在属性选项卡，选择LabelString。双击修改为”选择面”</li><li>选择SelectMode，右击将值从Single改Multiple</li><li>在树列表中选择colorPicker0。在属性选项卡，选择Label。双击修改为”选择颜色”</li><li>在树列表中选择Group。在属性选项卡，选择Label。双击修改为”面”</li><li>在树列表中选择Dialog。在属性选项卡，选择Label。双击修改为”改变面的颜色”</li></ul><p><img src="/assets/photos/块编辑器2.jpg" alt="最终结果"></p><h2 id="二、从对话框生成代码"><a href="#二、从对话框生成代码" class="headerlink" title="二、从对话框生成代码"></a><strong>二、从对话框生成代码</strong></h2><p>1.在设计对话框选择”代码生成”块，右击”语言”，选择Java</p><p>2.右击”生成附注”，选择True</p><p>3.右击”特定于块的代码”，选择True</p><p>4.确保”用户出口”为True。</p><p>5.确保”更新”、”确定”、”显示的对话框”为True</p><p>6.选择保存(ctrl+s)，生成一个.dlx文件,一个.java文件</p><p>7.点击”退出块 UI 样式编辑器”</p><h2 id="三、向生成代码中添加代码"><a href="#三、向生成代码中添加代码" class="headerlink" title="三、向生成代码中添加代码"></a><strong>三、向生成代码中添加代码</strong></h2><p>1.打开.java 文件</p><p>2.添加”添加以下代码”、”添加代码结束”中间代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public void initialize() throws NXException, RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    try</span><br><span class="line">    &#123;</span><br><span class="line">        group0 = (nxopen.blockstyler.Group)theDialog.topBlock().findBlock(&quot;group0&quot;);</span><br><span class="line">        selection0 = (nxopen.blockstyler.SelectObject)theDialog.topBlock().findBlock(&quot;selection0&quot;);</span><br><span class="line">        colorPicker0 = (nxopen.blockstyler.ObjectColorPicker)theDialog.topBlock().findBlock(&quot;colorPicker0&quot;);</span><br><span class="line">        //添加以下代码---------------</span><br><span class="line">        selection0.addFilter(nxopen.blockstyler.SelectObject.FilterType.FACES);//过滤器，只能选择面</span><br><span class="line">        //添加代码结束---------------</span><br><span class="line">    &#125;</span><br><span class="line">    catch(Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        //---- Enter your exception handling code here -----</span><br><span class="line">        theUI.nxmessageBox().show(&quot;Block Styler&quot;, nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public int apply() throws NXException, RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    int errorCode = 0;</span><br><span class="line">    try</span><br><span class="line">    &#123;</span><br><span class="line">        //---- Enter your callback code here -----</span><br><span class="line">        //添加以下代码---------------</span><br><span class="line">        //获取DisplayModification对象</span><br><span class="line">        TaggedObject[] selObjs = selection0.getSelectedObjects();</span><br><span class="line">        DisplayModification dispMod = theSession.displayManager().newDisplayModification();</span><br><span class="line">        //获取选择的颜色</span><br><span class="line">        int[] colors = colorPicker0.getValue();</span><br><span class="line">        dispMod.setNewColor(colors[0]);</span><br><span class="line">        //获取选择的面</span><br><span class="line">        List&lt;DisplayableObject&gt; dispObjs = new ArrayList&lt;DisplayableObject&gt;();</span><br><span class="line">        for (TaggedObject taggedObject : selObjs) &#123;</span><br><span class="line">            dispObjs.add((DisplayableObject) taggedObject);</span><br><span class="line">        &#125;</span><br><span class="line">        //应用</span><br><span class="line">        dispMod.apply((DisplayableObject[]) dispObjs.toArray());</span><br><span class="line">        dispMod.dispose();</span><br><span class="line">        //添加代码结束---------------</span><br><span class="line">    &#125;</span><br><span class="line">    catch(Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        //---- Enter your exception handling code here -----</span><br><span class="line">        errorCode = 1;</span><br><span class="line">        theUI.nxmessageBox().show(&quot;Block Styler&quot;, nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    return errorCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、设置目录结构"><a href="#四、设置目录结构" class="headerlink" title="四、设置目录结构"></a><strong>四、设置目录结构</strong></h2><p>1.设置以下环境变量作为应用程序的根目录。</p><pre><code>UGII_USER_DIR(或UGII_GROUP_DIR)=&lt;full directory path&gt;</code></pre><p>注意：此环境变量仅适用于单个应用程序。有关为单个或多个应用程序设置根目录的附加信息，请参见<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide:id1142131:genid_environment_variables_36_1466" target="_blank" rel="noopener">环境变量</a>。</p><p>2.在上面指定的根目录下创建应用程序的目录结构。请参见<a href="https://persist2.github.io/2018/01/26/NXOpen%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/#more" target="_blank" rel="noopener">应用程序目录结构</a>，看看如何设置目录结构以及NX如何在启动时加载自定义文件和应用程序。</p><p>3.复制.class、.dlx文件到上一步中创建的应用程序目录</p><h2 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a><strong>五、测试</strong></h2><p>1.打开模型应用模块(打开或新建一个模型)</p><p>2.点击 文件–执行–NXOpen。快捷键Ctrl+U。选择.class文件运行</p><h2 id="六、实例文件"><a href="#六、实例文件" class="headerlink" title="六、实例文件"></a><strong>六、实例文件</strong></h2><p>对话框文件：<a href="/assets/file/changeFaceColor.dlx">changeFaceColor.dlx</a><br>源码：<a href="/assets/file/changeFaceColor.java">changeFaceColor.java</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你可以为许多不同的任务和函数创建一个NX打开的程序，比如在NX中操作的一个从命令行启动的函数，它可以被添加到菜单列表或其他NX命令结构中，或者是一个新对话框。&lt;/p&gt;
&lt;p&gt;在这个例子中，我们创建一个对话框，选择面然后改变面颜色。&lt;/p&gt;
&lt;p&gt;主要步骤如下:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;创建一个对话框&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从对话框中生成代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;添加代码到生成的源文件中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设置目录结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;测试&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中，我们修改initialize(初始化)和apply(应用)回调函数。对于更复杂的对话框，你可以将代码添加到update(更新)回调函数来处理不断的变化。&lt;br&gt;有关创建对话框的其他信息，参见&lt;a href=&quot;https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_blockstyler:intro_int_ov_bl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UIStyler块介绍&lt;/a&gt;。&lt;br&gt;有关使用静态API属性的信息，参见&lt;a href=&quot;https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_blockstyler:bs_code_generation_ov:xid396515&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;块属性的静态API&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="NX二次开发" scheme="http://yoursite.com/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="NX二次开发" scheme="http://yoursite.com/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>浅谈NX二次开发可用的开发工具包</title>
    <link href="http://yoursite.com/2017/07/24/%E6%B5%85%E8%B0%88NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E5%8F%AF%E7%94%A8%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
    <id>http://yoursite.com/2017/07/24/浅谈NX二次开发可用的开发工具包/</id>
    <published>2017-07-24T03:41:23.000Z</published>
    <updated>2018-10-23T05:44:26.949Z</updated>
    
    <content type="html"><![CDATA[<p>NX和其他西门子PLM软件产品提供了许多软件工具包。NXOpen是指提供直接与NX对象模型一起工作的过程API。每个API支持特定的编程语言。一组相对较新的语言都共享一个共同的对象模型，称为通用的API(Common API)。其他三种API已经存在多年，统称为遗留或经典API(Classic APIs)。</p><a id="more"></a><h2 id="一、Common-API"><a href="#一、Common-API" class="headerlink" title="一、Common API"></a><strong>一、Common API</strong></h2><p>这个NX架构向NX开发人员提供一个公共对象的特性和功能。使用这个公共对象模型，可以自动生成多语言绑定。这意味着来自通用api的所有语言都具有相同的对象集、对象属性和方法。此外，对于所有公共API，类层次结构是相同的。</p><p>这种体系结构比传统api使用的体系结构有许多优势。例如:</p><ul><li>所有通用api语言在NX功能方面都是平等的。这意味着您可以自由地选择适合您特定需求的实现语言，而不必担心缺少的功能。</li><li>在NX中引入新的功能和自动化功能；交互方式和编程方式之间的功能不再延迟。</li><li>现在您可以访问NX开发人员使用的同一个对象模型。</li></ul><p>通用api可以使用以下语言绑定：</p><p>1.NX Open for .NET - 这个API使用微软的.NET框架。这个API可以使用.NET兼容的语言创建任何自动化程序，包括Visual Basic .NET和C #。用户可以充分利用.NET框架提供的所有好处，包括本地Windows对话框开发工具和VisualStudio集成开发环境（IDE）的所有功能。如果Windows是你选择的平台，这个API是理想的。</p><p>2.NX Open for Java - 这个API使用甲骨文的java平台。java提供了许多好处，包括平台独立性和巨大的现有类库。java抽象窗口工具包（AWT）和Swing提供了工具构建平台无关的对话框。java远程方法调用（RMI）方法提供的工具来构建基于客户机/服务器应用程序。此外，还可以提供诸如Eclipse这样的免费开发环境。如果正在开发多个平台客户机/服务器应用程序，则此API是理想的。</p><p>3.NX Open for C++ - 这个API提供了NX的C++接口。这个新的C++库兼容Open C and Open C++ APIs。如果你需要提高现有的C / C++应用程序，这个API是理想的。</p><p>4.NX Open for Python - 这个API提供了一个NX的Python接口。Python是一种脚本语言，它使用现代编程范式，如面向对象编程和反射。它使用较简介的语法，并有一些用于科学和数值编程的扩展包。没有提供Python的远程API。</p><h2 id="二、Journaling-录制功能"><a href="#二、Journaling-录制功能" class="headerlink" title="二、Journaling(录制功能)"></a><strong>二、Journaling(录制功能)</strong></h2><p>虽然Journaling不是一个工具包，在这里介绍是因为它可以用来记录自动化解决方案或使用大型应用程序生成代码。</p><p>Journaling是一种快速的自动化工具，记录、编辑和回放，交互式NX。它从通用API构建，在NX的交互式会话生成一个脚本文件，它可以在稍后时间重放。这些Journaling可以通过简单的编程结构和用户界面组件进行编辑和增强，以快速生成定制程序。</p><p>虽然日志重播目前仅限于# Python，C，Visual Basic .NET，用户可以选择记录在任何常用的API的语言。这种技术可以用来生成示例代码，然后可以在较大的应用程序中使用。</p><h2 id="三、Classic-APIs"><a href="#三、Classic-APIs" class="headerlink" title="三、Classic APIs"></a><strong>三、Classic APIs</strong></h2><p>在NX采用通用api之前，开发了这三个api。这些API仍然可用，但不再对它们增强。</p><p>1.Open C - Open C API(ufunc)是NX的直接编程接口，它允许用户使用流行的C编程语言创建自定义应用程序。NX开发人员、客户和合作伙伴已经使用它来生成独特的应用程序来增强NX或充当完全独立的实用程序。Open C还提供了一个完全可扩展的数据模型，允许客户定义类似于标准NX对象的新类型的对象，并持久保存在NX部分文件中。<br>Open C API已经发展了很多年，由5000多个函数组成。这些函数统称为用户函数。这个API通常被称为ufunc。开放的C函数通常有命名约定：UF_<application area="">_<function>。例如，uf_modl_create_plane()。<br>考虑到这个API的历史，它提供了广泛的功能。为了确保新的应用程序都可以访问这些功能.net，java，Python提供了<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide:id1142196:wrappers" target="_blank" rel="noopener">包装器</a>。</function></application></p><p>2.Open C++ - 这个API为NX提供了第一个面向对象的接口。用C++写的，这个API充分利用了面向对象的特征包括继承、封装和多态性。OpenC++提供完整的访问的类层次结构，使客户能够重写方法，派生自己的类，并创建全新NX的持久对象。OpenC++完全兼容Open C API。</p><p>3.NX Open GRIP - GRIP(图形交互编程)是一种用于自动化CAD/CAM任务的中间脚本语言。用户可以创建应用程序来实现数控操作，创建几何和绘图对象，控制系统参数，执行文件管理功能和修改现有的几何图形。</p><h2 id="四、KF-Knowledge-Fusion"><a href="#四、KF-Knowledge-Fusion" class="headerlink" title="四、KF(Knowledge Fusion)"></a><strong>四、KF(Knowledge Fusion)</strong></h2><p>Knowledge Fusion (KF) - 此API是嵌入在NX中的解释型、面向对象的语言。KF允许您通过创建规则，将工程知识添加到任务中，这些规则是语言的基本组成部分。语言是声明性的，而不是过程性的，这意味着规则在需要时执行，不管顺序如何。知识融合规则引擎根据规则之间的依赖关系确定正确的规则触发序列。此外，该语言还具有访问外部知识库（如数据库或电子表格）的能力，以及与其他应用程序（如分析和优化包）的接口。此API非常适合于需要参与模型更新的关联、持久对象的应用程序。有关更多信息，请参见<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_fusion" target="_blank" rel="noopener">知识融合和知识融合帮助和最佳实践</a>。</p><h2 id="五、其他的NX开发工具包"><a href="#五、其他的NX开发工具包" class="headerlink" title="五、其他的NX开发工具包"></a><strong>五、其他的NX开发工具包</strong></h2><p>除了上面提供的NX开放API工具包之外，西门子PLM软件还提供了以下的NX自动化工具。本文档将大致介绍NX开放的这些工具包。每个工具箱的完整信息可以在各自的用户指南中找到。</p><p>1.Block Styler (UI Styler) - 这是一个视觉用户界面生成器，可以交互设计的便携式NX风格对话框。它由NX开发人员在内部使用，外部由用户和第三方开发人员使用。这提供了一个运行在NX内的对话框生成器。由生成器产生的对话框定义文件是在运行NX会话期间自动加载，并提供程序处理用户交互的必要事件回调。更多信息见<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_blockstyler" target="_blank" rel="noopener">BlockStyler用户指南</a>。</p><p>2.MenuScript - 此工具允许终端用户和第三方开发人员创建和编辑NX菜单。MenuScript是一个文本语言，可以用来自定义NX菜单项,用于从NX启动应用程序。菜单文件支持定制的主菜单栏和快速查看弹出菜单。标准的NX菜单可以定制,以满足特定的工作流程,可添加Block Styler创建对话框到新的菜单项。更多信息请查看<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_menuscript" target="_blank" rel="noopener">菜单用户指南</a>。</p><p>3.Open User Interface Styler (UI Styler) - UI Styler是可视化的用户界面生成器，用于维护Block Styler之前创建的基于UI Styler的对话框。新的对话框，应使用Block Styler.定义。更多信息见<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:index_uistyler" target="_blank" rel="noopener">UI Styler用户指南</a>。</p><h2 id="六、其他的西门子PLM软件工具包"><a href="#六、其他的西门子PLM软件工具包" class="headerlink" title="六、其他的西门子PLM软件工具包"></a><strong>六、其他的西门子PLM软件工具包</strong></h2><p>西门子PLM软件提供了许多其他自动化和系统集成工具包。这里提到了两个工具包，因为它们与NX一起使用的频率比较高。这些工具包的使用超出了本手册的范围。有关更多信息，请参见它们各自的用户指南，它们不是NX帮助库的一部分。</p><p>1.Parasolid - Parasolid是世界领先的生产验证的几何建模软件，允许用户模拟行业最复杂的部件和组件。作为在不同计算机上的几何引擎的辅助设计、制造和工程（CAD/CAM/CAE）应用，Parasolid已在全球产品设计建立一个行业标准。Parasolid是用NX实体建模内核。</p><p>2.Teamcenter Engineering Integration Tool Kit (ITK) - 这个API提供用于定制Teamcenter支持组织的特定的数据管理功能和公用事业的需求。Teamcenter是客户端-服务器架构为基础的系统。可以对服务器和客户机部分进行定制。如果必须直接与Teamcenter自动化保存或检索产品数据通过NX和其他第三方应用程序生成过程中的应用，那么这个API是理想的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><p><a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api#uid:xid1162445:index_nxopen_prog_guide:id1142151:xid1179109" target="_blank" rel="noopener">官方例子</a><br>链接：<a href="https://pan.baidu.com/s/1smARhMX" target="_blank" rel="noopener">UFUN中文API</a> 密码：pjc1<br>链接：<a href="https://pan.baidu.com/s/1df7ExS" target="_blank" rel="noopener">NXJavaAPI离线文档</a> 密码：494s<br><a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/open_java_ref/index.html" target="_blank" rel="noopener">Java官方API</a></p><h2 id="推荐网站"><a href="#推荐网站" class="headerlink" title="推荐网站"></a><strong>推荐网站</strong></h2><p><a href="http://www.nxjournaling.com/" target="_blank" rel="noopener">nxjournaling</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NX和其他西门子PLM软件产品提供了许多软件工具包。NXOpen是指提供直接与NX对象模型一起工作的过程API。每个API支持特定的编程语言。一组相对较新的语言都共享一个共同的对象模型，称为通用的API(Common API)。其他三种API已经存在多年，统称为遗留或经典API(Classic APIs)。&lt;/p&gt;
    
    </summary>
    
      <category term="NX二次开发" scheme="http://yoursite.com/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="NX二次开发" scheme="http://yoursite.com/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>NX二次开发Eclipse环境搭建</title>
    <link href="http://yoursite.com/2017/07/20/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91Eclipse%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/07/20/NX二次开发Eclipse环境搭建/</id>
    <published>2017-07-20T01:44:19.000Z</published>
    <updated>2018-10-23T05:45:59.545Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器；<br>本文章适用于使用Java进行NX二次开发。其他NXopen支持的语言请参考<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api/#uid:index" target="_blank" rel="noopener">官方文档</a>。</p></blockquote><a id="more"></a><h2 id="一、开发环境的搭建"><a href="#一、开发环境的搭建" class="headerlink" title="一、开发环境的搭建"></a><strong>一、开发环境的搭建</strong></h2><p>NXjar包存放目录：%NX安装目录%\NXBIN。NX提供的所有jar包，导入NXOpen开头的jar到JavaProject即可<br><img src="/assets/photos/NXjar.jpg" alt="NX提供的jar包"></p><h2 id="二、调试环境的搭建"><a href="#二、调试环境的搭建" class="headerlink" title="二、调试环境的搭建"></a><strong>二、调试环境的搭建</strong></h2><p>使用Eclipse调试Java程序：</p><p>1.在NX中，选择 文件→执行 →替代Java参数</p><p>2.在替代Java参数对话框, UGII_JVM_OPTIONS 输入框中输入:</p><pre><code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8888</code></pre><p>(可选) 在 UGII_JVM_CLASSPATH 对话框中, 填入任意额外的Java classpath地址</p><p>3.你不需要在这里写入NXopen jar的classpath，因为他们会被NX自动加载</p><p>4.(可选) 在 UGII_JVM_LIBRARY_DIR 对话框, 写入你的64位Java的JVM地址。例如:</p><pre><code>%jre安装目录%\bin\server</code></pre><p>5.点击 确定</p><p>6.在Eclipse Package Explorer，右键项目，Debug As →Debug Configurations</p><p>7.创建一个Remote Java Application，使用和上面相同的端口<br><img src="/assets/photos/RemoteJavaApplication.jpg" alt="NX提供的jar包"></p><p>8.你需要在NX上运行Java程序。Eclipse会在指定断点暂停</p><p>9.其他语言调试环境搭建敬请参见<a href="https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api/#uid:debug_vs" target="_blank" rel="noopener">NX其他语言调试环境搭建</a></p><p>THE END.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器；&lt;br&gt;本文章适用于使用Java进行NX二次开发。其他NXopen支持的语言请参考&lt;a href=&quot;https://docs.plm.automation.siemens.com/tdoc/nx/12/nx_api/#uid:index&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NX二次开发" scheme="http://yoursite.com/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="NX二次开发" scheme="http://yoursite.com/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/06/26/hello-world/"/>
    <id>http://yoursite.com/2017/06/26/hello-world/</id>
    <published>2017-06-26T08:24:38.000Z</published>
    <updated>2018-10-23T05:47:36.852Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
